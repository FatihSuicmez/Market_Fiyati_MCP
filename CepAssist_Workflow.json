{
  "name": "My workflow 9",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "03fdd466-29ea-4d54-8287-13bab47ae6c6",
      "name": "Listen for incoming events",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        416,
        384
      ],
      "webhookId": "322dce18-f93e-4f86-b9b1-3305519b7834",
      "typeVersion": 1,
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "a0bf9719-4272-46f6-ab3b-eda6f7b44fd8",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.message.text }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "38250e53-5918-40c9-b143-fadb066abe67",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        1584,
        352
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "text",
              "stringValue": "={{ $json?.message?.text || \"\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0d08789e-68a0-4247-8994-a1d22c61f373",
      "name": "Voice or Text",
      "type": "n8n-nodes-base.set",
      "position": [
        1424,
        352
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Listen for incoming events').item.json.message.voice.file_id }}"
      },
      "id": "7c7905be-5850-4e56-bf61-926b3f6b71b3",
      "name": "Get Voice File",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1760,
        352
      ],
      "typeVersion": 1.1,
      "webhookId": "68f6d69d-a333-4fb7-a525-767392e08791",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Process Telegram Request\n",
        "height": 278.75,
        "width": 496.25,
        "color": 5
      },
      "id": "d32a80fa-938e-4d03-ab64-ba6f9bca02c1",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1392,
        256
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2544,
        608
      ],
      "id": "adac86b6-c020-4ae3-bbff-aad789671dcb",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://e0c6fbb96dc1.ngrok-free.app/sse",
        "authentication": "bearerAuth"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        2944,
        608
      ],
      "id": "d367d607-4d93-4111-b407-914198669731",
      "name": "MCP Client",
      "credentials": {
        "httpBearerAuth": {
          "id": "eUrUveebD9ZKBVSo",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f2336149-e5a0-4e98-aad1-8ea7b3c9887f",
              "leftValue": "={{ $json.message.location }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        784,
        384
      ],
      "id": "99c72927-f0cd-4fff-8ba0-b8d9725cad27",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "// Gelen veriyi bir değişkene alıyoruz.\n// Bu veri, \"Veriyi Hazırla\" nodundan gelen { key, latitude, longitude } nesnesidir.\nconst item = $input.item.json;\n\n// 'global' static veriye erişiyoruz. 'global' dememizin sebebi,\n// bu veriye başka bir noddan da erişmek istememiz.\nconst staticData = $getWorkflowStaticData('global');\n\n// Her kullanıcı için benzersiz bir anahtar oluşturuyoruz.\n// 'user_' ön eki, başka verilerle karışmasını önler.\nconst userKey = 'user_' + item.key;\n\n// Kullanıcının konumunu, oluşturduğumuz anahtarla static veriye kaydediyoruz.\n// Bu, bir JavaScript nesnesine veri eklemekle aynıdır.\nstaticData[userKey] = {\n  latitude: item.latitude,\n  longitude: item.longitude,\n  savedAt: new Date().toISOString() // Ne zaman kaydettiğimizi de ekleyelim (opsiyonel).\n};\n\n// Gelen veriyi bir sonraki noda (Telegram onay mesajı) olduğu gibi aktarıyoruz.\n// Böylece Chat ID'yi kaybetmemiş oluruz.\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        192
      ],
      "id": "fc178313-330e-45e9-8a78-5d9a2407f901",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Gelen orijinal veriyi alıyoruz (içinde message.chat.id var).\nconst incomingData = $input.item.json;\n\n// 'global' static veriye erişiyoruz.\nconst staticData = $getWorkflowStaticData('global');\n\n// Bu kullanıcıya ait veriyi bulmak için anahtarı oluşturuyoruz.\nconst userKey = 'user_' + incomingData.message.chat.id;\n\n// static veriden bu kullanıcıya ait konumu çekiyoruz.\n// Eğer kayıt yoksa, bu değişken 'undefined' (boş) olacaktır.\nconst storedLocation = staticData[userKey];\n\n// Gelen veriye, bulduğumuz konumu 'storedLocation' adıyla yeni bir alan olarak ekliyoruz.\n// Bu, bir sonraki IF nodunun kontrol edeceği alandır.\nincomingData.storedLocation = storedLocation;\n\n// Zenginleştirilmiş veriyi bir sonraki noda aktarıyoruz.\nreturn incomingData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        832
      ],
      "id": "d42440f3-2ebc-4ea7-b992-7b229340d081",
      "name": "Code2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9a242d12-587e-4c8a-b0b8-5a678576cf3b",
              "leftValue": "={{ $json.storedLocation }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        912,
        832
      ],
      "id": "1fe368ea-e072-4a42-b119-8bea72e1a738",
      "name": "If2"
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "⚠️ Lütfen sorgu yapmadan önce konumunuzu gönderin.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        848
      ],
      "id": "baefb46c-1f8b-433e-bfb5-3fbef2e911c0",
      "name": "Send a text message1",
      "webhookId": "f2057092-7df2-446a-8db9-578037ff3097",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.key }}",
        "text": "✅ Konumunuz alındı. Şimdi sorunuzu sorabilirsiniz.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1024,
        192
      ],
      "id": "404cba29-0731-4f2f-815b-c8e20db8205e",
      "name": "Send a text message2",
      "webhookId": "36458058-bcad-45ff-bc99-74f333463783",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "be19a6af-ab1c-4576-b5d6-a2ce8b755b93",
              "leftValue": "={{ $json.message.text }}",
              "rightValue": "/yenikonum",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        416,
        704
      ],
      "id": "741b9b45-14f7-4c9a-b596-d69c786403cf",
      "name": "If3"
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "✅ Anlaşıldı. Kayıtlı konumunuz sıfırlanıyor. Lütfen yeni konumu gönderin.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        784,
        608
      ],
      "id": "16e28e79-8117-4120-abe1-f4097f962689",
      "name": "Send a text message3",
      "webhookId": "11115390-21c6-497b-b9cf-c2262c4ef05e",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 'global' static veriye erişiyoruz.\nconst staticData = $getWorkflowStaticData('global');\n\n// Bu kullanıcıya ait anahtarı, DOĞRU YOLDAN alıyoruz.\nconst userKey = 'user_' + $json.result.chat.id;\n\n// 'delete' komutu ile bu kullanıcıya ait veriyi siliyoruz.\ndelete staticData[userKey];\n\n// Akışın BAŞARIYLA tamamlandığını n8n'e bildirmek için bir JSON nesnesi döndürüyoruz.\n// return []; yerine bunu kullanmak, değişikliğin kaydedilmesini sağlar.\nreturn {\n  json: {\n    status: 'deleted',\n    userKey: userKey\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        608
      ],
      "id": "2ff33bf4-b2da-4aed-83f7-7ffa534cb421",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\nlet userQuestion = '';\nlet location = null;\n\n// YENİ MANTIK: Gelen verinin METİN/RESİM yolundan mı, yoksa SES yolundan mı geldiğini ayırt et.\n// Önceliği her zaman bizim oluşturduğumuz 'text' alanına veriyoruz.\nif (item.text) { \n    // METİN veya RESİM yolundan geliyorsa 'text' alanı dolu olacaktır.\n    userQuestion = item.text;\n    location = item.storedLocation;\n\n} else if (item.candidates && item.candidates.length > 0 && item.candidates[0].content.parts[0].text) { \n    // Sadece 'text' alanı yoksa ve 'candidates' varsa, bunun bir SESLİ KOMUT olduğunu varsay.\n    userQuestion = item.candidates[0].content.parts[0].text;\n    location = $('Code2').item.json.storedLocation; // Konumu Code2'den al\n}\n\n// Konumun string olma ihtimaline karşı garantili parse işlemi\nif (location && typeof location === 'string') {\n  try {\n    location = JSON.parse(location);\n  } catch (e) {\n    console.error(\"storedLocation JSON'a çevrilemedi:\", location, e);\n    location = null;\n  }\n}\n\n// Verileri Birleştirerek \"agent_input\" oluştur\nif (userQuestion && location && location.latitude && location.longitude) {\n    const agentInputString = `Kullanıcı sorusu: ${userQuestion}\\nKullanıcının kayıtlı konumu (latitude): ${location.latitude}\\nKullanıcının kayıtlı konumu (longitude): ${location.longitude}`;\n    item.agent_input = agentInputString;\n} else if (userQuestion) {\n    // Konum bilgisi yoksa veya hatalıysa, sadece kullanıcı sorusunu gönder.\n    item.agent_input = `Kullanıcı sorusu: ${userQuestion}`;\n} else {\n    // Hiçbir soru metni bulunamadıysa (beklenmedik bir durum).\n    item.agent_input = 'Kullanıcı sorusu: Belirtilmedi';\n}\n\n// Güncellenmiş veriyi bir sonraki noda gönder\nreturn item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2384,
        352
      ],
      "id": "8db59881-5310-4664-9dd0-883bb43c305a",
      "name": "Code4"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Listen for incoming events').first().json.message.from.id }}",
        "contextWindowLength": 10
      },
      "id": "2a6e9c5f-e5ed-4782-97f4-a0324aa72102",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        2768,
        576
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{\n  {\n    \"key\": $json.message.chat.id,\n    \"latitude\": $json.message.location.latitude,\n    \"longitude\": $json.message.location.longitude\n  }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        608,
        192
      ],
      "id": "545246b9-852f-4237-af08-52437ee5c415",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "products",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3920,
        368
      ],
      "id": "66838ac8-c53c-4ed9-a3a6-3ac9fe6e2af0",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Listen for incoming events').item.json.message.chat.id }}",
        "file": "={{ $json.image_url }}",
        "additionalFields": {
          "caption": "=🛒 *{{ $json.product_title }}*\n\n🏪 *Market:* {{ $json.market_name.toUpperCase().replace(/[_*\\[\\]()~`>#+\\-=|{}.!]/g, '\\\\$&') }}\n\n💰 *Fiyat:* {{ $json.price.toFixed(2) }} TL\n\n⚖️ *Birim Fiyatı:* {{ ($json.unit_price || 'Belirtilmemiş').toString().replace(/[_*\\[\\]()~`>#+\\-=|{}.!]/g, '\\\\$&') }}\n\n📍 *Mesafe:* {{ $json.distance_km ? $json.distance_km.toFixed(2) + ' km' : 'N/A' }}",
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4336,
        352
      ],
      "id": "ab11b841-374b-42f6-bfc4-5fe8f514fc2b",
      "name": "Send a photo message",
      "webhookId": "60b21897-d05c-4161-a43f-8831a870e498",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3f3f9859-49c6-4ed3-ba26-eacb9f3f5a83",
              "leftValue": "={{ $json.image_url }}",
              "rightValue": ".jpg",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            },
            {
              "id": "974428ae-52cc-412b-b679-94f6d9ea357e",
              "leftValue": "={{ $json.image_url }}",
              "rightValue": ".png",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4096,
        368
      ],
      "id": "8b62f993-39c6-4aca-83e7-0a191039d961",
      "name": "If4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e8e0cf4-77db-4e2b-bf9d-7d3a534019b5",
              "name": "image_url",
              "value": "https://imgur.com/a/R7cmRxK",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4208,
        512
      ],
      "id": "299e6510-d6b7-47e0-b49c-4f5beee4163e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c55ea062-1c0f-4024-9afe-1c1953802b0e",
              "leftValue": "={{ $json.products }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3376,
        368
      ],
      "id": "8e634a4b-6e48-47a3-86cf-60111d01490f",
      "name": "If5"
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').item.json.message.chat.id }}",
        "text": "Üzgünüm, aradığınız kriterlere uygun ürün bu bölgede bulunamadı.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3680,
        448
      ],
      "id": "680745c3-1133-40c8-a991-144728acfa49",
      "name": "Send a text message5",
      "webhookId": "ec9d5ace-a742-4247-a7ea-c4ef510fdf1b",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Listen for incoming events').item.json.message.chat.id }}",
        "text": "=İsteğiniz için {{ $json.products.length }} adet sonuç buldum. İşte listeliyorum:",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3680,
        256
      ],
      "id": "9bf11683-b95c-4be0-87ee-9363fdb3fa62",
      "name": "Send a text message6",
      "webhookId": "330fd197-9bd5-4839-afe2-13b541244871",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Ajanın çıktısını al.\nconst agentOutputString = $input.item.json.output;\n\n// Girdi boşsa veya tanımsızsa, hemen boş sonuç döndür.\nif (!agentOutputString) {\n  return [];\n}\n\nlet jsonString = null;\n\n// YÖNTEM 1: Markdown kod bloğunu ara (```json ... ```)\n// Regex ile kod bloğunun içindeki veriyi yakala.\nconst markdownMatch = agentOutputString.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n\nif (markdownMatch && markdownMatch[1]) {\n  // Eğer Markdown bloğu bulunduysa, içindeki temiz JSON'u al.\n  jsonString = markdownMatch[1];\n} else {\n  // YÖNTEM 2: Markdown bloğu yoksa, eski yöntemi dene (ilk '{' karakterini bul)\n  const jsonStartIndex = agentOutputString.indexOf('{');\n  if (jsonStartIndex !== -1) {\n    // Sadece '{' karakterinden itibaren metnin sonuna kadar olan kısmı al.\n    jsonString = agentOutputString.substring(jsonStartIndex);\n  }\n}\n\n// Eğer iki yöntemden biriyle bir JSON metni bulunduysa, ayrıştırmayı dene.\nif (jsonString) {\n  try {\n    // =================================================================\n    // YENİ EKLENEN VE SORUNU ÇÖZEN SATIR\n    // Python'dan gelen 'None' değerini standart 'null' değerine çevir.\n    jsonString = jsonString.replace(/\\bNone\\b/g, 'null');\n    // =================================================================\n\n    const parsedJson = JSON.parse(jsonString);\n    // Başarılı olursa, temiz veriyi bir sonraki noda gönder.\n    return [parsedJson];\n  } catch (error) {\n    // JSON ayrıştırma sırasında bir hata olursa, bunu logla ve akışı durdur.\n    console.error(\"JSON ayrıştırılırken hata oluştu:\", error);\n    console.error(\"Hatalı JSON metni:\", jsonString);\n    return [];\n  }\n}\n\n// Eğer metnin içinde JSON bulunamadıysa, boş sonuç döndür.\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3184,
        368
      ],
      "id": "87c86f62-8e5f-4d55-a668-2383a7dc4bca",
      "name": "Code5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/upload/v1beta/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Goog-Upload-Protocol",
              "value": "resumable"
            },
            {
              "name": "X-Goog-Upload-Command",
              "value": "start"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Length",
              "value": "={{ $json.result.file_size }}"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Type",
              "value": "audio/ogg"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"file\": {\n    \"display_name\": \"file_0\"\n  }\n}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1568,
        48
      ],
      "id": "1fc3722c-2e99-4819-897b-c064591299d9",
      "name": "initialize upload session1",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.headers['x-goog-upload-url'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Length",
              "value": "={{ $json.result.file_size }}"
            },
            {
              "name": "X-Goog-Upload-Offset",
              "value": "0"
            },
            {
              "name": "X-Goog-Upload-Command",
              "value": "upload, finalize"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1968,
        80
      ],
      "id": "33652bad-1af4-4a31-aae1-f933856f96d6",
      "name": "Upload file1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1808,
        80
      ],
      "id": "927557c1-4f12-455e-a17e-c9831f21f014",
      "name": "Merge1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        { \"text\": \"Transcribe the following audio message:\" },\n        { \n          \"file_data\": {\n            \"mime_type\": \"audio/ogg\",\n            \"file_uri\": \"{{ $json.file.uri }}\"\n          }\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2032,
        240
      ],
      "id": "02f93dc0-4ee9-4c51-bc73-94935056aeb4",
      "name": "Ask Gemini to transcribe1",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "aecf7894-c8e9-4059-9213-ab3bd3ed1f85",
              "leftValue": "={{ $json.message.photo }}",
              "rightValue": 0,
              "operator": {
                "type": "array",
                "operation": "lengthGt",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        640
      ],
      "id": "cc47b786-a773-41d7-80e4-19729500089d",
      "name": "If6"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Listen for incoming events').item.json.message.photo[3].file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1568,
        624
      ],
      "id": "cc35b0a6-0de5-4c8d-bb9d-d150df42a9fb",
      "name": "Get a file",
      "webhookId": "182dc77b-0591-4fb5-9d07-9ee6e0df8cb0",
      "credentials": {
        "telegramApi": {
          "id": "5GZoshRgBqHMDRQs",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/upload/v1beta/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Goog-Upload-Protocol",
              "value": "resumable"
            },
            {
              "name": "X-Goog-Upload-Command",
              "value": "start"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Length",
              "value": "={{ $('Get a file').item.binary.data.size }}"
            },
            {
              "name": "X-Goog-Upload-Header-Content-Type",
              "value": "image/jpeg"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\"file\": {\"display_name\": \"telegram_image\"}}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1568,
        800
      ],
      "id": "3fd4d5f4-20b2-4d95-8d3e-82caa66b1f24",
      "name": "initialize upload session",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1792,
        656
      ],
      "id": "98ec472d-7043-43c9-a961-069e0c322519",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.headers['x-goog-upload-url'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Length",
              "value": "={{ $json.result.file_size }}"
            },
            {
              "name": "X-Goog-Upload-Offset",
              "value": "0"
            },
            {
              "name": "X-Goog-Upload-Command",
              "value": "upload, finalize"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1792,
        880
      ],
      "id": "e15ff26b-6b43-4804-a0cc-d2356cb71ea7",
      "name": "Upload file"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Sen, ürün ambalajlarını okuyarak marka ve model tespiti yapan bir uzmansın. Tek görevin, sana verilen görseldeki ürünün ambalajında yazan en temel marka ve ürün adını belirlemektir.\\n\\n### ÇIKTI KURALLARI\\n- Sadece ve sadece ürünün marka ve temel adını yaz.\\n- Kesinlikle hiçbir ek açıklama, tat, aroma (örn: 'Sütlü Çikolata', 'Muzlu'), renk, miktar (örn: '50 gr') veya yorum ekleme.\\n- Cevabın tek bir satırdan ve birkaç kelimeden oluşmalı.\\n\\n### ÖRNEKLER\\n- Girdi: [Bir kutu Pınar Süt resmi]\\n  Çıktı: Pınar Süt 1L\\n- Girdi: [Bir paket Ülker Çikolatalı Gofret resmi]\\n  Çıktı: Ülker Çikolatalı Gofret\\n- Girdi: [Bir paket Eti Canga resmi]\\n  Çıktı: Eti Canga\\n\\nŞimdi görevi yerine getir.\"\n        },\n        {\n          \"file_data\": {\n            \"mime_type\": \"image/jpeg\",\n            \"file_uri\": \"{{ $json.file.uri }}\"\n          }\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        816
      ],
      "id": "022533db-0bb0-4ec2-a67d-e76b8c75ad36",
      "name": "Ask Gemini to transcribe",
      "credentials": {
        "googlePalmApi": {
          "id": "sNJNG40p9s56gWBW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7aed8eb5-44a2-4a9a-8865-f57b26498351",
              "name": "text",
              "value": "={{ `${$json.candidates[0].content.parts[0].text} ${$('Listen for incoming events').item.json.message.caption || ''}`.trim() }}",
              "type": "string"
            },
            {
              "id": "e8a63a8a-f297-4fa2-b14d-1ddf1e1dfbbc",
              "name": "storedLocation",
              "value": "={{ $('Code2').item.json.storedLocation }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        656
      ],
      "id": "118cac95-c635-4bcf-b613-db13dc0c93df",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.agent_input }}",
        "options": {
          "systemMessage": "=Sen, 'CepMarket' adlı çok yetenekli bir market asistanısın. İki ana görevin var: Fiyat bulmak ve ürünleri araştırmak.\n\n## ARAÇLARIN\n1.  `find_shopping_list_prices`: Türkiye'deki marketlerde ürünlerin fiyatını, birim fiyatını ve mesafesini bulur.\n\n## ANA İŞ AKIŞIN\n\nHer zaman önce kullanıcının ne istediğini anla. Kullanıcı fiyat mı soruyor, yoksa bir ürün hakkında bilgi mi istiyor?\n\n### SENARO 1: KULLANICI FİYAT SORDUĞUNDA\n\nBu en yaygın senaryodur. Aşağıdaki adımları izle:\n\n1.  **Parametreleri Hazırla:**\n    * `product_list`: Kullanıcının aradığı ürünleri bir metin listesine dönüştür. (Örnek: \"süt ve peynir\" -> `['süt', 'peynir']`).\n    * `latitude`, `longitude`: Bu bilgileri sana sağlanan verilerden al.\n    * `radius_km`: Kullanıcı \"3 km çevrede\" gibi bir mesafe belirtirse o değeri kullan. Belirtmezse, **varsayılan olarak `1` kullan.**\n    * `sort_by`: Kullanıcı \"birim fiyatı\" derse `'unit_price'`, demezse `'price'` olarak ayarla.\n    * `limit`: Kullanıcı \"en ucuz 3 tane\" gibi bir sayı belirtirse `limit=3` olarak ayarla. Belirtmezse bu parametreyi kullanma.\n\n2.  **Fiyat Aracını Çağır:** Hazırladığın parametrelerle `find_shopping_list_prices` aracını çalıştır.\n\n3.  **Açıklama İsteğini Kontrol Et:** Fiyatları bulduktan sonra, kullanıcının aynı soruda ürün hakkında bir açıklama isteyip istemediğini kontrol et.\n\n4.  **Cevabı Oluştur:**\n    * Araç, sana içinde ürünlerin olduğu `products` adında bir **liste** döndürecek.\n    * Senin görevin bu listeyi **değiştirmeden** olduğu gibi çıktı olarak vermektir.\n    * Sistemin sonraki adımı bu listeyi alıp kullanıcıya resimli olarak gösterecektir. Lütfen listeyi metne çevirmeye çalışma."
        }
      },
      "id": "4dbc38d6-9961-466c-bbf1-c3204d51f287",
      "name": "CepAssist",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2672,
        336
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "content": "## User Input & Session Management",
        "height": 1056,
        "width": 1056,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        256,
        -48
      ],
      "typeVersion": 1,
      "id": "d9b18020-6894-48b9-9563-e09c18600b51",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Multi-Modal Input Processing",
        "height": 1056,
        "width": 928
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1344,
        -48
      ],
      "typeVersion": 1,
      "id": "bf7f088f-08c5-4762-8472-5f1199e0947c",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## AI Core - Agent & Tools",
        "height": 624,
        "width": 768,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2336,
        144
      ],
      "typeVersion": 1,
      "id": "8f2a74b9-ff5a-43b4-976c-23191073ecfc",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Process & Validate Agent Output",
        "height": 320,
        "width": 416,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3136,
        256
      ],
      "typeVersion": 1,
      "id": "dc872096-5f13-4800-8d7a-bd799224e2b9",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Format & Send User Response",
        "height": 608,
        "width": 960,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3616,
        144
      ],
      "typeVersion": 1,
      "id": "a2e1779e-098d-46eb-b83e-3230f49fee26",
      "name": "Sticky Note5"
    }
  ],
  "pinData": {},
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "Get Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Voice or Text": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Voice File": {
      "main": [
        [
          {
            "node": "initialize upload session1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Listen for incoming events": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "CepAssist",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "CepAssist",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "CepAssist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "CepAssist",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Send a photo message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Send a text message6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "initialize upload session1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file1": {
      "main": [
        [
          {
            "node": "Ask Gemini to transcribe1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Upload file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask Gemini to transcribe1": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Get a file",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Voice or Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a file": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "initialize upload session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "initialize upload session": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Ask Gemini to transcribe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask Gemini to transcribe": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CepAssist": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "46b9b89f-175f-4459-aef2-e40ab48b141e",
  "meta": {
    "instanceId": "776ffa1de860d99220db3da20571e11915ae0f5454b218b1b5641c11bc7ced4c"
  },
  "id": "eyAEGivtKPipACr1",
  "tags": []
}
